import requests
from PIL import Image

headers = {
    'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
    'Accept-Encoding': 'gzip, deflate',
    'Accept-Language': 'zh-CN,zh;q=0.9',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
    'Cookie': 'nowISBN=9789863502357; nowPage=0; ASP.NET_SessionId=00he1d25medsvcheszqdhiv5; goToPage=; nowISBN=',
    'Host': 'ebooks.airitilibrary.cn',
    'Pragma': 'no-cache',
    'Referer': 'http://ebooks.airitilibrary.cn/pdfViewer/index.aspx?PublicationID=P20180309022&IsPreview=true&GoToPage=',
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36'
}


# url = 'http://ebooks.airitilibrary.cn/pdfViewer/GetPageImage?ISBN=9789863502357&PageNum=0'
# response = requests.get(url, headers=headers)
# with open('1.png', 'wb') as f:
#     f.write(response.content)


def img_draw():
    img = Image.open('1.png')
    toImage = Image.new('RGB', (img.size[0], img.size[1]))
    h = [
        [67, 50, 31, 108, 98, 37, 104, 97, 83, 52, 81, 7, 117, 27, 88, 2, 42, 65, 18, 36, 103, 57, 43, 68, 9, 93, 21,
         112, 4, 35, 89, 61, 90, 51, 54, 45, 75, 47, 10, 79, 63, 13, 73, 107, 101, 39, 113, 41, 86, 94, 11, 69, 30, 14,
         82, 80, 20, 6, 92, 55, 60, 87, 115, 24, 34, 64, 76, 95, 22, 96, 62, 33, 84, 118, 23, 59, 40, 70, 114, 71, 116,
         58, 25, 29, 53, 106, 1, 3, 26, 16, 66, 119, 111, 44, 102, 0, 109, 38, 78, 48, 17, 110, 19, 32, 46, 85, 8, 15,
         49, 99, 12, 56, 105, 28, 74, 91, 5, 77, 100, 72],
        [81, 38, 8, 109, 9, 94, 40, 96, 88, 115, 24, 27, 72, 30, 35, 104, 7, 22, 2, 112, 37, 31, 73, 55, 93, 65, 80, 83,
         77, 33, 56, 119, 68, 106, 64, 49, 92, 13, 19, 4, 116, 14, 100, 10, 42, 102, 76, 63, 84, 90, 107, 45, 111, 11,
         103, 75, 20, 117, 43, 101, 36, 3, 12, 1, 95, 29, 82, 58, 59, 16, 34, 98, 108, 78, 61, 26, 86, 23, 118, 91, 74,
         18, 52, 46, 28, 6, 32, 85, 44, 62, 105, 71, 0, 113, 25, 87, 15, 50, 21, 41, 17, 99, 97, 54, 51, 48, 5, 67, 60,
         57, 79, 89, 47, 39, 53, 110, 69, 66, 114, 70],
        [5, 115, 46, 19, 23, 1, 8, 87, 30, 37, 104, 117, 82, 31, 85, 107, 50, 34, 95, 88, 105, 21, 108, 33, 73, 45, 7,
         93, 64, 42, 100, 39, 2, 36, 11, 69, 101, 29, 44, 16, 110, 113, 20, 4, 86, 13, 55, 74, 106, 61, 40, 53, 97, 59,
         27, 28, 56, 109, 58, 67, 96, 38, 102, 63, 35, 99, 76, 41, 22, 57, 65, 116, 26, 15, 72, 17, 84, 114, 79, 92, 77,
         10, 68, 119, 43, 54, 94, 89, 66, 118, 52, 0, 83, 12, 103, 47, 81, 112, 18, 98, 48, 75, 3, 111, 25, 32, 80, 6,
         71, 78, 62, 90, 70, 91, 51, 24, 60, 49, 9, 14],
        [24, 25, 99, 11, 102, 29, 46, 49, 115, 42, 76, 37, 35, 20, 61, 82, 32, 14, 105, 100, 59, 69, 10, 74, 81, 94, 52,
         45, 80, 109, 97, 57, 48, 72, 73, 75, 41, 84, 92, 33, 19, 62, 1, 9, 38, 51, 12, 44, 95, 54, 67, 0, 65, 63, 18,
         8, 15, 107, 27, 16, 91, 56, 3, 77, 4, 113, 23, 31, 43, 106, 116, 30, 79, 118, 87, 86, 103, 28, 85, 117, 101, 2,
         93, 53, 22, 110, 78, 70, 36, 60, 98, 90, 111, 47, 112, 68, 34, 50, 39, 5, 6, 64, 96, 21, 26, 108, 17, 119, 13,
         83, 114, 58, 104, 7, 40, 66, 89, 71, 88, 55],
        [20, 78, 102, 31, 116, 49, 19, 18, 105, 95, 82, 17, 4, 79, 50, 81, 53, 28, 30, 99, 54, 86, 45, 62, 41, 112, 91,
         33, 40, 118, 68, 69, 56, 12, 97, 87, 21, 93, 100, 1, 32, 94, 10, 48, 26, 92, 16, 71, 37, 72, 44, 117, 111, 35,
         51, 66, 9, 22, 90, 64, 2, 114, 6, 104, 70, 75, 101, 34, 27, 76, 88, 38, 106, 67, 110, 25, 36, 77, 108, 115, 24,
         84, 52, 119, 60, 47, 96, 0, 39, 43, 80, 23, 13, 65, 61, 8, 7, 113, 73, 107, 11, 98, 29, 5, 3, 89, 15, 14, 83,
         103, 109, 55, 42, 59, 85, 58, 46, 57, 74, 63],
        [91, 20, 104, 110, 35, 56, 59, 46, 52, 86, 78, 47, 34, 3, 101, 108, 57, 21, 6, 32, 2, 22, 93, 98, 62, 85, 44,
         26, 41, 7, 117, 9, 106, 68, 83, 102, 73, 28, 80, 95, 65, 4, 23, 36, 79, 76, 0, 105, 77, 63, 49, 51, 67, 13, 14,
         116, 107, 64, 97, 25, 27, 37, 38, 114, 89, 43, 115, 50, 113, 87, 58, 45, 55, 1, 92, 75, 69, 82, 96, 17, 11,
         103, 29, 99, 24, 10, 94, 109, 54, 90, 33, 100, 12, 74, 70, 118, 39, 112, 5, 48, 72, 84, 42, 66, 60, 111, 61,
         19, 81, 119, 30, 18, 53, 71, 8, 40, 16, 88, 31, 15],
        [52, 116, 26, 24, 4, 54, 93, 59, 7, 65, 56, 49, 12, 40, 63, 35, 33, 22, 115, 78, 106, 57, 47, 20, 9, 86, 11, 28,
         36, 111, 46, 64, 72, 117, 61, 10, 119, 104, 96, 84, 42, 16, 32, 81, 18, 60, 108, 51, 67, 105, 44, 70, 68, 15,
         94, 73, 82, 118, 48, 5, 41, 90, 91, 80, 75, 110, 17, 113, 74, 66, 89, 21, 109, 112, 102, 95, 2, 38, 107, 27,
         23, 97, 8, 45, 103, 77, 39, 92, 76, 1, 34, 19, 0, 53, 29, 31, 79, 55, 98, 100, 3, 43, 69, 62, 101, 85, 87, 58,
         6, 30, 37, 83, 50, 88, 13, 14, 71, 25, 114, 99],
        [43, 46, 79, 96, 7, 9, 52, 48, 30, 54, 76, 17, 59, 10, 41, 60, 77, 5, 1, 44, 81, 64, 89, 82, 62, 86, 71, 93,
         102, 22, 55, 80, 32, 94, 87, 36, 47, 61, 75, 8, 38, 68, 108, 4, 51, 14, 29, 25, 3, 67, 115, 50, 101, 92, 16,
         24, 119, 63, 84, 113, 104, 28, 26, 15, 56, 97, 70, 0, 35, 109, 110, 39, 45, 18, 73, 88, 34, 74, 49, 95, 40, 69,
         105, 27, 37, 53, 91, 112, 57, 90, 31, 23, 117, 12, 2, 111, 107, 83, 20, 65, 19, 58, 33, 6, 118, 42, 114, 99,
         66, 13, 85, 21, 116, 78, 11, 72, 98, 103, 106, 100],
        [29, 97, 103, 17, 109, 45, 14, 26, 57, 107, 37, 77, 56, 119, 108, 24, 58, 21, 59, 91, 74, 78, 54, 69, 92, 25,
         62, 105, 106, 93, 53, 39, 61, 110, 23, 95, 76, 64, 48, 18, 60, 66, 51, 20, 41, 43, 83, 75, 113, 71, 115, 35, 2,
         15, 7, 3, 72, 4, 5, 46, 8, 98, 65, 90, 70, 68, 0, 9, 30, 40, 111, 6, 94, 104, 99, 27, 16, 96, 12, 100, 117, 85,
         102, 87, 42, 38, 22, 33, 47, 118, 34, 89, 88, 116, 81, 73, 49, 67, 82, 79, 52, 80, 19, 44, 13, 32, 86, 114, 28,
         31, 84, 10, 11, 63, 36, 55, 112, 101, 50, 1],
        [79, 105, 107, 67, 115, 87, 102, 88, 97, 12, 38, 15, 41, 74, 37, 91, 29, 113, 92, 75, 93, 8, 94, 6, 117, 23, 78,
         14, 86, 54, 1, 64, 80, 25, 63, 65, 48, 72, 34, 43, 111, 17, 83, 61, 21, 5, 84, 99, 19, 46, 7, 27, 45, 42, 40,
         57, 47, 0, 95, 13, 106, 101, 26, 69, 36, 70, 33, 90, 118, 32, 56, 55, 20, 39, 77, 51, 30, 4, 96, 24, 3, 62,
         119, 116, 31, 110, 109, 68, 49, 18, 103, 66, 10, 44, 82, 76, 73, 22, 108, 50, 100, 16, 28, 98, 85, 2, 59, 81,
         112, 60, 89, 11, 58, 53, 35, 71, 104, 9, 114, 52]]
    r = h[0 % 10]
    a = len(r)
    if img.size[0] > img.size[1]:
        pass
    else:
        while img.size[0] % a != 0:
            for i in range(len(h)):
                h[i].insert(0, a)
            a += 1
        r = h[0 % 10]
        n = img.size[1]
        o = int(img.size[0] / a)
        for i in range(a):
            cropped = img.crop((o * r[i], 0, o * r[i] + o, 0 + n))
            toImage.paste(cropped, (o * i, 0, o * i + o, 0 + n))
    toImage.save('2.png')

if __name__ == '__main__':
    img_draw()
